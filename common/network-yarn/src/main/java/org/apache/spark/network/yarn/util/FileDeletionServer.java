/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.network.yarn.util;

import java.io.File;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.yarn.conf.YarnConfiguration;
import org.apache.hadoop.yarn.server.nodemanager.ContainerExecutor;
import org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A file deletion util class for yarn to delete shuffle file generated by executor.
 * Since yarn's node manager may have different user with the spark executor process, in this case,
 * we must use `ContainerExecutor` to delete these files.
 */
public class FileDeletionServer {
  private final Logger logger = LoggerFactory.getLogger(FileDeletionServer.class);

  private final Configuration conf;
  private final ContainerExecutor exec;
  private String user = null;

  public FileDeletionServer() {
    this.conf = new Configuration();
    String userName = conf.get("yarn.nodemanager.linux-container-executor.user");
    if (null != userName && !userName.isEmpty()) {
      user = userName;
      logger.info("Node manager will use " + user + " to start container for each application.");
    } else {
      logger.info("Node manager will use application's own user to start container.");
    }
    this.exec = ReflectionUtils.newInstance(
      this.conf.getClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,
        DefaultContainerExecutor.class, ContainerExecutor.class), this.conf);
  }

  public void deleteFile(String userName, File file) {
    try {
      logger.debug("Begin delete the file: " + file.getCanonicalPath());
      Path path =  new Path(file.getCanonicalPath());
      if (null != user) {
        exec.deleteAsUser(user, path);
      } else {
        exec.deleteAsUser(userName, path);
      }
      logger.debug("Success delete the file.");
    } catch (IOException e) {
      logger.error("Error when getting the path: " + e);
    } catch (InterruptedException e) {
      logger.error("Error when deleting the path: " + e);
    }
  }
}
